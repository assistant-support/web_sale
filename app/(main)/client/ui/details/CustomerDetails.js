// File: app/client/ui/details/CustomerDetails.js

"use client";

import React, { useState, useEffect, useCallback } from "react";
import styles from "./CustomerDetails.module.css";

// --- IMPORT TH√ÄNH PH·∫¶N & CONTEXT ---
import { usePanels } from "@/contexts/PanelContext";
import { useCampaigns } from "@/contexts/CampaignContext";
import {
  Svg_History,
  Svg_Notes,
  Svg_Edit,
  Svg_Pen,
  Svg_Send,
} from "@/components/(icon)/svg";
import Loading from "@/components/(ui)/(loading)/loading";
import StageIndicator from "@/components/(ui)/progress/StageIndicator";
import TextNoti from "@/components/(features)/(noti)/textnoti";
import Schedule from "../schedule";
import CustomerHistoryPanel from "./CustomerHistoryPanel";

//================================================================================
// --- HELPER COMPONENTS (Th√†nh ph·∫ßn ph·ª• tr·ª£) ---
//================================================================================

/**
 * Component InfoRow: Hi·ªÉn th·ªã m·ªôt d√≤ng th√¥ng tin theo c·∫∑p "Nh√£n" v√† "Gi√° tr·ªã".
 * @param {string} label - Nh√£n hi·ªÉn th·ªã b√™n tr√°i.
 * @param {string|React.ReactNode} value - Gi√° tr·ªã hi·ªÉn th·ªã b√™n ph·∫£i.
 * @param {React.ReactNode} children - C√°c n√∫t ho·∫∑c component con ƒëi k√®m.
 * @param {string} statusColor - M√†u tr·∫°ng th√°i (n·∫øu c√≥) ƒë·ªÉ styling.
 */
const InfoRow = ({ label, value, children, statusColor }) => (
  <div className={styles.infoRow}>
    <span className={styles.infoLabel}>{label}</span>
    <div className={styles.infoValue}>
      {statusColor ? (
        <span className={styles.statusTag} data-status={statusColor}>
          {value}
        </span>
      ) : (
        value
      )}
      {children}
    </div>
  </div>
);

/**
 * Component StageSelector: Hi·ªÉn th·ªã c√°c b∆∞·ªõc c·ªßa giai ƒëo·∫°n chƒÉm s√≥c v√† cho ph√©p l·ª±a ch·ªçn.
 * @param {number} currentLevel - M·ª©c giai ƒëo·∫°n hi·ªán t·∫°i.
 * @param {function} onSelect - H√†m callback ƒë∆∞·ª£c g·ªçi khi m·ªôt giai ƒëo·∫°n ƒë∆∞·ª£c ch·ªçn.
 */
const StageSelector = ({ currentLevel, onSelect }) => {
  const stages = ["Ch∆∞a c√≥", "ChƒÉm s√≥c", "OTP", "Nh·∫≠p h·ªçc"];
  return (
    <div className={styles.stageSelector}>
      {stages.map((stage, index) => (
        <div
          key={index}
          className={`${styles.stageStep} ${
            currentLevel === index ? styles.active : ""
          }`}
          onClick={() => onSelect(index)}
        >
          <div className={styles.stageDot}></div>
          <div className={styles.stageLabel}>{stage}</div>
        </div>
      ))}
    </div>
  );
};

/**
 * ƒê·ªãnh d·∫°ng th·ªùi gian th√†nh d·∫°ng t∆∞∆°ng ƒë·ªëi (vd: 5 ph√∫t tr∆∞·ªõc)
 * @param {Date | string} date - Th·ªùi gian c·∫ßn ƒë·ªãnh d·∫°ng
 */
function formatRelativeTime(date) {
  const now = new Date();
  const seconds = Math.round((now - new Date(date)) / 1000);
  const minutes = Math.round(seconds / 60);
  const hours = Math.round(minutes / 60);
  const days = Math.round(hours / 24);
  const months = Math.round(days / 30.44);
  const years = Math.round(days / 365.25);

  if (seconds < 60) return "v√†i gi√¢y tr∆∞·ªõc";
  if (minutes < 60) return `${minutes} ph√∫t tr∆∞·ªõc`;
  if (hours < 24) return `${hours} gi·ªù tr∆∞·ªõc`;
  if (days < 30) return `${days} ng√†y tr∆∞·ªõc`;
  if (months < 12) return `${months} th√°ng tr∆∞·ªõc`;
  return `${years} nƒÉm tr∆∞·ªõc`;
}

const CommentSection = ({ customer, user, onUpdateCustomer }) => {
  const [newComment, setNewComment] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleAddComment = async () => {
    if (!newComment.trim()) return;
    setIsSubmitting(true);
    try {
      // G·ªåI ƒê·∫æN API PATCH TH·ªêNG NH·∫§T
      const res = await fetch(`/api/client`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          customerId: customer._id,
          // G·ª≠i payload ƒë·∫∑c bi·ªát ƒë·ªÉ API nh·∫≠n bi·∫øt ƒë√¢y l√† y√™u c·∫ßu th√™m comment
          updateData: { _comment: newComment },
        }),
      });

      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.message || "Th√™m b√¨nh lu·∫≠n th·∫•t b·∫°i");
      }

      const responseJson = await res.json();

      // G·ªçi callback onUpdateCustomer ƒë·ªÉ k√≠ch ho·∫°t hi·ªáu ·ª©ng l√†m m·ªõi
      onUpdateCustomer(responseJson.data);
      setNewComment(""); // X√≥a n·ªôi dung trong √¥ nh·∫≠p
    } catch (error) {
      alert(`L·ªói: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={styles.commentSection}>
      {/* --- √î NH·∫¨P B√åNH LU·∫¨N --- */}
      <div className={styles.commentInputArea}>
        <textarea
          className={styles.commentTextarea}
          placeholder="Vi·∫øt b√¨nh lu·∫≠n..."
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          rows={2}
          disabled={isSubmitting}
        />
        <button
          className={styles.commentSubmitButton}
          onClick={handleAddComment}
          disabled={isSubmitting || !newComment.trim()}
        >
          {isSubmitting ? (
            <Loading small />
          ) : (
            <Svg_Send w={18} h={18} c={"currentColor"} />
          )}
        </button>
      </div>

      {/* --- HEADER DANH S√ÅCH B√åNH LU·∫¨N --- */}
      <div className={styles.commentListHeader}>
        <span>S·∫Øp x·∫øp theo: M·ªõi nh·∫•t</span>
        <span className={styles.commentCount}>
          {customer.comments?.length || 0} b√¨nh lu·∫≠n
        </span>
      </div>

      {/* --- DANH S√ÅCH B√åNH LU·∫¨N --- */}
      <div className={styles.commentList}>
        {customer.comments && customer.comments.length > 0 ? (
          customer.comments.map((comment) => (
            <div key={comment._id} className={styles.commentItem}>
              {/* Icon Giai ƒëo·∫°n */}
              <div className={styles.commentStageIcon}>
                <span>Gƒê</span>
                <strong>{comment.stage}</strong>
              </div>
              <div className={styles.commentContent}>
                <div className={styles.commentHeader}>
                  <span className={styles.commentUser}>
                    {comment.user?.name || "M·ªôt nh√¢n vi√™n"}
                  </span>
                  <span className={styles.commentTime}>
                    {formatRelativeTime(comment.time)}
                  </span>
                </div>
                <p className={styles.commentDetail}>{comment.detail}</p>
              </div>
            </div>
          ))
        ) : (
          <p className={styles.noComments}>Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o.</p>
        )}
      </div>
    </div>
  );
};
//================================================================================
// --- MAIN COMPONENT (Th√†nh ph·∫ßn ch√≠nh) ---
//================================================================================

export default function CustomerDetails({
  customerData,
  onUpdateCustomer,
  user,
  initialLabels,
  statuses,
  onRecipientToggle,
}) {
  //----------------------------------------------------------------
  // --- STATE MANAGEMENT (Qu·∫£n l√Ω State) ---
  //----------------------------------------------------------------

  // State ch√≠nh: l∆∞u tr·ªØ b·∫£n sao c·ªßa d·ªØ li·ªáu kh√°ch h√†ng ƒë·ªÉ component t·ª± qu·∫£n l√Ω.
  const [customer, setCustomer] = useState(customerData);

  // State cho c√°c gi√° tr·ªã c√≥ th·ªÉ ch·ªânh s·ª≠a tr√™n form.
  const [editableName, setEditableName] = useState(customerData.name || "");
  const [editableStatus, setEditableStatus] = useState(
    customerData.status?._id || "",
  );
  const [editableStageLevel, setEditableStageLevel] = useState(
    customerData.stageLevel || 0,
  );
  const [editableNotes, setEditableNotes] = useState({
    careNote: customerData.careNote || "",
    studyTryNote: customerData.studyTryNote || "",
    studyNote: customerData.studyNote || "",
  });

  // State qu·∫£n l√Ω tr·∫°ng th√°i UI (hi·ªÉn th·ªã/·∫©n c√°c th√†nh ph·∫ßn).
  const [isEditingName, setIsEditingName] = useState(false);
  const [isNoteVisible, setNoteVisible] = useState(false);
  const [isStatusSelectorVisible, setStatusSelectorVisible] = useState(false);
  const [showCampaignList, setShowCampaignList] = useState(false);

  // State cho h·ªá th·ªëng th√¥ng b√°o.
  const [notification, setNotification] = useState({
    show: false,
    title: "",
    mes: "",
    color: "default",
  });

  //----------------------------------------------------------------
  // --- HOOKS ---
  //----------------------------------------------------------------

  const { openPanel } = usePanels();
  const { drafts, addRecipientToDraft } = useCampaigns();

  /**
   * üß† **LOGIC C·ªêT L√ïI**: ƒê·ªìng b·ªô h√≥a state n·ªôi b·ªô v·ªõi props t·ª´ b√™n ngo√†i.
   * Hook n√†y s·∫Ω ch·∫°y l·∫°i M·ªñI KHI prop `customerData` thay ƒë·ªïi.
   * ƒê√¢y l√† gi·∫£i ph√°p cho v·∫•n ƒë·ªÅ "panel kh√¥ng render l·∫°i" khi d·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ n∆°i kh√°c.
   */
  useEffect(() => {
    // 1. C·∫≠p nh·∫≠t state ch√≠nh c·ªßa component.
    setCustomer(customerData);

    // 2. ƒê·ªìng b·ªô h√≥a t·∫•t c·∫£ c√°c state d√πng cho vi·ªác ch·ªânh s·ª≠a tr√™n form.
    setEditableName(customerData.name || "");
    setEditableStatus(customerData.status?._id || "");
    setEditableStageLevel(customerData.stageLevel || 0);
    setEditableNotes({
      careNote: customerData.careNote || "",
      studyTryNote: customerData.studyTryNote || "",
      studyNote: customerData.studyNote || "",
    });
  }, [customerData]);

  // Hook ƒë·ªÉ t·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y.
  useEffect(() => {
    if (!notification.show) return;
    const timerId = setTimeout(
      () => setNotification((prev) => ({ ...prev, show: false })),
      3000,
    );
    // H√†m d·ªçn d·∫πp: h·ªßy b·ªô ƒë·∫øm gi·ªù n·∫øu component b·ªã unmount.
    return () => clearTimeout(timerId);
  }, [notification.show]);

  //----------------------------------------------------------------
  // --- HANDLERS (H√†m x·ª≠ l√Ω s·ª± ki·ªán) ---
  //----------------------------------------------------------------

  /**
   * L∆∞u m·ªôt tr∆∞·ªùng d·ªØ li·ªáu c·ª• th·ªÉ v·ªÅ server.
   * @param {string} fieldName - T√™n c·ªßa tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t (v√≠ d·ª•: 'name', 'stageLevel').
   * @param {*} value - Gi√° tr·ªã m·ªõi c·ªßa tr∆∞·ªùng ƒë√≥.
   */
  const handleSaveField = async (fieldName, value) => {
    try {
      const res = await fetch(`/api/client`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          customerId: customer._id,
          updateData: { [fieldName]: value }, // C·∫≠p nh·∫≠t ƒë·ªông
        }),
      });

      if (!res.ok) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
      const responseJson = await res.json();

      // G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu ·ªü component cha, k√≠ch ho·∫°t re-render to√†n c·ª•c.
      onUpdateCustomer(responseJson.data);

      if (fieldName === "name") setIsEditingName(false);

      setNotification({
        show: true,
        title: "Th√†nh c√¥ng",
        mes: "ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin.",
        color: "green",
      });
    } catch (error) {
      setNotification({
        show: true,
        title: "L·ªói",
        mes: error.message,
        color: "red",
      });
    }
  };

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i chƒÉm s√≥c c·ªßa kh√°ch h√†ng.
   */
  const handleUpdateStatus = async () => {
    if (!editableStatus) {
      setNotification({
        show: true,
        title: "C·∫£nh b√°o",
        mes: "Vui l√≤ng ch·ªçn m·ªôt tr·∫°ng th√°i.",
        color: "yellow",
      });
      return;
    }
    await handleSaveField("status", editableStatus);
    setStatusSelectorVisible(false); // ·∫®n dropdown sau khi l∆∞u
  };

  /**
   * X√≥a tr·∫°ng th√°i chƒÉm s√≥c c·ªßa kh√°ch h√†ng.
   */
  const handleDeleteStatus = async () => {
    if (
      !window.confirm(
        "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tr·∫°ng th√°i c·ªßa kh√°ch h√†ng n√†y kh√¥ng?",
      )
    ) {
      return;
    }
    // G·ªçi h√†m handleSaveField v·ªõi gi√° tr·ªã `null` ƒë·ªÉ API hi·ªÉu l√† "x√≥a"
    await handleSaveField("status", null);
    setStatusSelectorVisible(false); // ·∫®n dropdown
  };

  /**
   * M·ªü panel "L√™n l·ªãch nhanh" cho kh√°ch h√†ng hi·ªán t·∫°i.
   */
  const handleOpenActionPanel = () => {
    // B∆Ø·ªöC KI·ªÇM TRA AN TO√ÄN: ƒê·∫£m b·∫£o user v√† user.zalo t·ªìn t·∫°i
    if (!user || !user.zaloActive) {
      setNotification({
        show: true,
        title: "L·ªói",
        mes: "Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n Zalo. Vui l√≤ng ki·ªÉm tra l·∫°i.",
        color: "red",
      });
      return; // D·ª´ng h√†m t·∫°i ƒë√¢y n·∫øu kh√¥ng c√≥ user
    }

    // N·∫øu user h·ª£p l·ªá, ti·∫øp t·ª•c m·ªü panel nh∆∞ b√¨nh th∆∞·ªùng
    const singleRecipientMap = new Map([[customerData._id, customerData]]);
    openPanel({
      id: `action-${customerData._id}`,
      component: Schedule,
      title: `H√†nh ƒë·ªông cho: ${customerData.name}`,
      props: {
        initialData: [customerData],
        // recipientsMap v√† onRecipientToggle c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu Schedule kh√¥ng d√πng,
        // nh∆∞ng gi·ªØ l·∫°i c≈©ng kh√¥ng sao
        onRecipientToggle: onRecipientToggle,
        user: user, // B√¢y gi·ªù `user` ch·∫Øc ch·∫Øn h·ª£p l·ªá
        label: initialLabels,
      },
    });
  };

  /**
   * M·ªü tab m·ªõi ƒë·ªÉ ƒë·∫øn trang c·∫≠p nh·∫≠t th√¥ng tin tuy·ªÉn sinh.
   */
  const handleUpdateLookup = () => {
    if (customer?.MaDangKy) {
      const url = `https://xettuyen.lhu.edu.vn/cap-nhat-thong-tin-xet-tuyen-dai-hoc?id=${encodeURIComponent(
        customer.MaDangKy,
      )}&htx=0`;
      window.open(url, "_blank");
    }
  };

  const handleShowHistory = (customer) => {
    if (!customer) return;
    const panelId = `history-${customer._id}`;
    openPanel({
      id: panelId,
      title: `L·ªãch s·ª≠ t∆∞∆°ng t√°c: ${customer.name}`,
      component: CustomerHistoryPanel,
      props: {
        panelData: { customerId: customer._id },
      },
    });
  };

  //----------------------------------------------------------------
  // --- UTILITY FUNCTIONS (H√†m ti·ªán √≠ch) ---
  //----------------------------------------------------------------

  const getStatusColor = (tinhTrang) => {
    if (tinhTrang === "Kh√¥ng c√≥ th√¥ng tin" || tinhTrang === "L·ªói tra c·ª©u")
      return "error";
    if (tinhTrang === "Thi·∫øu th√¥ng tin") return "warning";
    if (tinhTrang === "ƒê·ªß ƒë√∫ng kh√¥ng x√©t tuy·ªÉn") return "success";
    if (tinhTrang) return "found";
    return "not-found";
  };

  //----------------------------------------------------------------
  // --- RENDER ---
  //----------------------------------------------------------------

  if (!customer) {
    return (
      <div className={styles.loadingContainer}>
        <Loading />
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* V√πng hi·ªÉn th·ªã th√¥ng b√°o */}
      {notification.show && (
        <div className={styles.notificationContainer}>
          <TextNoti
            title={notification.title}
            mes={notification.mes}
            color={notification.color}
          />
        </div>
      )}

      <div className={styles.content}>
        {/* === SECTION: TH√îNG TIN C∆† B·∫¢N === */}
        <div className={styles.section}>
          <h3 className={styles.sectionTitle}>Th√¥ng tin c∆° b·∫£n</h3>
          <div className={styles.infoRow}>
            <span className={styles.infoLabel}>T√™n kh√°ch h√†ng</span>
            <div className={styles.infoValue}>
              {isEditingName ? (
                <div className={styles.editInputContainer}>
                  <input
                    type="text"
                    value={editableName}
                    onChange={(e) => setEditableName(e.target.value)}
                    className={styles.inlineInput}
                    autoFocus
                  />
                  <button
                    onClick={() => handleSaveField("name", editableName)}
                    className={styles.inlineSaveButton}
                  >
                    L∆∞u
                  </button>
                  <button
                    onClick={() => setIsEditingName(false)}
                    className={styles.inlineCancelButton}
                  >
                    H·ªßy
                  </button>
                </div>
              ) : (
                <>
                  <span>{customer.name || "(ch∆∞a c√≥ t√™n)"}</span>
                  <button
                    onClick={() => setIsEditingName(true)}
                    className={styles.inlineButton}
                  >
                    <Svg_Edit w={14} h={14} /> S·ª≠a
                  </button>
                </>
              )}
            </div>
          </div>
          <InfoRow
            label="Di ƒë·ªông"
            value={customer.DienThoai || customer.phone}
          />
          <div
            className={`${styles.buttonContainer} ${styles.multiButtonContainer}`}
          >
            <button
              onClick={handleOpenActionPanel}
              className={`${styles.buttonBase} ${styles.greenButton}`}
            >
              H√†nh ƒë·ªông nhanh
            </button>
            <button
              onClick={() => setShowCampaignList(!showCampaignList)}
              className={`${styles.buttonBase} ${styles.greenButton}`}
            >
              Th√™m v√†o chi·∫øn d·ªãch
            </button>
          </div>
        </div>

        {/* === SECTION: TH√îNG TIN X√âT TUY·ªÇN === */}
        <div className={styles.section}>
          <h3 className={styles.sectionTitle}>Th√¥ng tin x√©t tuy·ªÉn</h3>
          <InfoRow label="T√™n" value={customer.name} />
          <InfoRow label="Di ƒë·ªông" value={customer.DienThoai} />
          <InfoRow label="M√£ ƒêK" value={customer.MaDangKy} />
          <InfoRow label="CMND/CCCD" value={customer.CMND} />
          <InfoRow label="Ng√†y ƒêK" value={customer.NgayDK} />
          <InfoRow label="Tr∆∞·ªùng THPT" value={customer.TruongTHPT} />
          <InfoRow label="Ng√†nh x√©t tuy·ªÉn" value={customer.TenNganh} />
          <InfoRow label="T·ªïng ƒëi·ªÉm" value={customer.TongDiem} />
          <InfoRow label="Ph∆∞∆°ng th·ª©c XT" value={customer.TenPhuongThuc} />
          <InfoRow
            label="T√¨nh tr·∫°ng TT"
            value={customer.TinhTrang}
            statusColor={getStatusColor(customer.TinhTrang)}
          />
          <div className={styles.buttonContainer}>
            <button
              className={`${styles.buttonBase} ${styles.ghostButton} ${styles.fullWidthButton}`}
              onClick={handleUpdateLookup}
              disabled={!customer?.MaDangKy}
            >
              <Svg_Pen w={14} h={14} /> ƒêi ƒë·∫øn trang c·∫≠p nh·∫≠t
            </button>
          </div>
        </div>

        {/* === SECTION: TH√îNG TIN CHƒÇM S√ìC === */}
        <div className={styles.section}>
          <h3 className={styles.sectionTitle}>Th√¥ng tin chƒÉm s√≥c</h3>
          <InfoRow label="Tr·∫°ng th√°i">
            <span>{customer.status?.name || "Ch∆∞a c√≥"}</span>
            <button
              className={styles.inlineButton}
              onClick={() => setStatusSelectorVisible(!isStatusSelectorVisible)}
            >
              <Svg_Edit w={14} h={14} /> Thay ƒë·ªïi
            </button>
          </InfoRow>

          {isStatusSelectorVisible && (
            <div className={styles.statusSelector}>
              <select
                value={editableStatus}
                onChange={(e) => setEditableStatus(e.target.value)}
              >
                <option value="">-- Ch·ªçn tr·∫°ng th√°i m·ªõi --</option>
                {statuses?.map((status) => (
                  <option key={status._id} value={status._id}>
                    {status.name}
                  </option>
                ))}
              </select>
              <div className={styles.actionButtons}>
                {customer?.status && (
                  <button
                    onClick={handleDeleteStatus}
                    // √Åp d·ª•ng style n√∫t c∆° b·∫£n v√† m√†u ƒë·ªè nguy hi·ªÉm
                    className={`${styles.buttonBase} ${styles.dangerButton}`}
                  >
                    X√≥a tr·∫°ng th√°i
                  </button>
                )}
                <button
                  onClick={handleUpdateStatus}
                  // √Åp d·ª•ng style n√∫t c∆° b·∫£n v√† m√†u xanh l∆∞u
                  className={`${styles.buttonBase} ${styles.blueButton}`}
                >
                  L∆∞u
                </button>
              </div>
            </div>
          )}

          <InfoRow label="Giai ƒëo·∫°n">
            <StageIndicator level={customer.stageLevel || 0} />
            <button
              className={styles.inlineButton}
              onClick={() => setNoteVisible(!isNoteVisible)}
            >
              <Svg_Notes w={14} h={14} /> Ghi ch√∫
            </button>
          </InfoRow>

          {isNoteVisible && (
            <div className={styles.section}>
              <div className={styles.sectionTitle}>Giai ƒëo·∫°n & Ghi ch√∫</div>
              <div className={styles.infoRow}>
                <StageSelector
                  currentLevel={editableStageLevel}
                  onSelect={(level) => handleSaveField("stageLevel", level)}
                />
              </div>
              <CommentSection
                customer={customer}
                user={user}
                onUpdateCustomer={onUpdateCustomer}
              />
            </div>
          )}
          <InfoRow label="NV ChƒÉm s√≥c">
            {customer.auth && customer.auth.length > 0
              ? customer.auth.map((user) => user.name || user.email).join(", ")
              : "Ch∆∞a c√≥"}
          </InfoRow>
        </div>

        {/* === SECTION: L·ªäCH S·ª¨ T∆Ø∆†NG T√ÅC === */}
        <div className={styles.buttonContainer}>
          <button
            className={`${styles.buttonBase} ${styles.ghostButton} ${styles.fullWidthButton}`}
            onClick={() => handleShowHistory(customer)}
          >
            <Svg_History w={16} h={16} /> Hi·ªÉn th·ªã l·ªãch s·ª≠ t∆∞∆°ng t√°c
          </button>
        </div>
      </div>
    </div>
  );
}
