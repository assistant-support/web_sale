// web_tslhu/app/(main)/admin/components/Panel/ScheduleDetailPanel.js
"use client";

import React, { useTransition } from "react";
import styles from "./ScheduleDetailPanel.module.css";
import { usePanels } from "@/contexts/PanelContext";
import { stopSchedule } from "@/app/actions/campaignActions";
import PendingQueuePanel from "./PendingQueuePanel";
import ExecutionHistoryPanel from "./ExecutionHistoryPanel";
import StackedProgressBar from "../shared/StackedProgressBar";

// Components con ƒë·ªÉ code s·∫°ch h∆°n
const ActionButton = ({ onClick, label, icon, disabled }) => (
  <button className={styles.actionButton} onClick={onClick} disabled={disabled}>
    {icon}
    <span>{label}</span>
  </button>
);

const InfoRow = ({ icon, label, value }) => (
  <div className={styles.infoRow}>
    <span className={styles.infoIcon}>{icon}</span>
    <span className={styles.infoLabel}>{label}</span>
    <span className={styles.infoValue}>{value || "Kh√¥ng c√≥"}</span>
  </div>
);

export default function ScheduleDetailPanel({
  panelData: job,
  closePanel,
  onScheduleUpdate,
  isArchived = false,
}) {
  const { openPanel } = usePanels();
  const [isPending, startTransition] = useTransition();

  const handleStopSchedule = () => {
    if (
      confirm(
        `B·∫°n c√≥ ch·∫Øc mu·ªën d·ª´ng v√† h·ªßy vƒ©nh vi·ªÖn l·ªãch tr√¨nh "${job.jobName}" kh√¥ng?`,
      )
    ) {
      startTransition(async () => {
        const result = await stopSchedule(job._id);
        if (result.error) {
          alert(`L·ªói: ${result.error}`);
        } else {
          onScheduleUpdate({ type: "STOP_SCHEDULE", jobId: job._id });
          closePanel();
        }
      });
    }
  };

  //<-----------------THAY ƒê·ªîI: S·ª≠a l·ªói truy·ªÅn props----------------->
  const handleOpenQueuePanel = () => {
    const panelId = `queue-${job._id}`;
    openPanel({
      id: panelId,
      title: `üë• H√†ng ƒë·ª£i: ${job.jobName}`,
      component: PendingQueuePanel,
      props: {
        // Truy·ªÅn ƒë√∫ng c·∫•u tr√∫c d·ªØ li·ªáu m√† PendingQueuePanel mong ƒë·ª£i
        panelData: {
          job: job,
          onScheduleUpdate: onScheduleUpdate,
        },
      },
    });
  };

  const handleOpenHistoryPanel = () => {
    const panelId = `history-${job._id}`;
    openPanel({
      id: panelId,
      title: `üìú L·ªãch s·ª≠: ${job.jobName}`,
      component: ExecutionHistoryPanel,
      props: {
        panelData: {
          jobId: job._id,
          onScheduleUpdate: onScheduleUpdate,
        },
      },
    });
  };

  const st = job.statistics || { total: 0, completed: 0, failed: 0 };
  const tasks = job.tasks || [];

  return (
    <div className={styles.panelContainer}>
      <div className={styles.progressSection}>
        <h4 className={styles.sectionTitle}>T·ªïng quan k·∫øt qu·∫£</h4>
        <StackedProgressBar
          success={st.completed}
          failed={st.failed}
          total={st.total}
        />
      </div>

      <div className={styles.configSection}>
        <h4 className={styles.sectionTitle}>Chi ti·∫øt C·∫•u h√¨nh</h4>
        <InfoRow icon="üìù" label="T√™n chi·∫øn d·ªãch" value={job.jobName} />
        <InfoRow icon="‚öôÔ∏è" label="Lo·∫°i h√†nh ƒë·ªông" value={job.actionType} />
        <InfoRow
          icon="üë§"
          label="T√†i kho·∫£n Zalo"
          value={`${job.zaloAccount?.name} (${job.zaloAccount?.phone})`}
        />
        <InfoRow
          icon="üßë‚Äçüíª"
          label="Ng∆∞·ªùi t·∫°o l·ªãch"
          value={`${job.createdBy?.name} (${job.createdBy?.email})`}
        />
        <InfoRow
          icon="‚ö°"
          label="T·ªëc ƒë·ªô"
          value={`${job.config?.actionsPerHour || 50} hƒë/gi·ªù`}
        />
        <InfoRow
          icon="‚è∞"
          label="T·∫°o l√∫c"
          value={new Date(job.createdAt).toLocaleString("vi-VN")}
        />
        {isArchived ? (
          <InfoRow
            icon="‚úÖ"
            label="Ho√†n th√†nh l√∫c"
            value={new Date(job.completedAt).toLocaleString("vi-VN")}
          />
        ) : (
          <InfoRow
            icon="üèÅ"
            label="D·ª± ki·∫øn xong"
            value={new Date(job.estimatedCompletionTime).toLocaleString(
              "vi-VN",
            )}
          />
        )}
      </div>

      <div className={styles.actionsContainer}>
        <ActionButton
          label={`H√†ng ƒë·ª£i (${tasks.length})`}
          icon="üë•"
          onClick={handleOpenQueuePanel}
          disabled={isArchived}
        />
        <ActionButton
          label="L·ªãch s·ª≠ th·ª±c thi"
          icon="üìú"
          onClick={handleOpenHistoryPanel}
        />
      </div>

      {job.actionType === "sendMessage" && job.config.messageTemplate && (
        <div className={styles.messageSection}>
          <h4>N·ªôi dung tin nh·∫Øn</h4>
          <pre className={styles.messageContent}>
            {job.config.messageTemplate}
          </pre>
        </div>
      )}

      {!isArchived && (
        <div className={styles.panelFooter}>
          <button
            onClick={handleStopSchedule}
            className={styles.stopButton}
            disabled={isPending}
          >
            {isPending ? "ƒêang x·ª≠ l√Ω..." : "D·ª´ng & H·ªßy L·ªãch tr√¨nh"}
          </button>
        </div>
      )}
    </div>
  );
}
