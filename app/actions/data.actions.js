'use server';

import dbConnect from "@/config/connectDB";
import Form from "@/models/formclient";
import checkAuthToken from '@/utils/checktoken';
import { reloadForm } from '@/data/form_database/wraperdata.db.js'
import Customer from '@/models/customer';
import mongoose from 'mongoose';
export async function createAreaAction(_previousState, formData) {
    await dbConnect();
    const name = formData.get('name');
    const user = await checkAuthToken();

    if (!user || !user.id) return { message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.', status: false };
    if (!user.role.includes('Admin')) {
        return { message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y', status: false };
    }
    const formInputValues = formData.getAll('formInput');
    const formInput = formInputValues.map(Number);
    const describe = formData.get('describe');
    if (!name) return { message: 'T√™n form l√† b·∫Øt bu·ªôc.', status: false };
    if (name.length > 50) return { message: 'T√™n form ph·∫£i √≠t h∆°n 50 k√≠ t·ª±', status: false };
    if (describe.length > 1000) return { message: 'M√¥ t·∫£ ph·∫£i √≠t h∆°n 1000 k√≠ t·ª±', status: false };
    const processedName = name.toString().toLowerCase().trim();
    try {
        const existingArea = await Form.findOne({ name: processedName });
        if (existingArea) {
            return { message: 'L·ªói: T√™n form n√†y ƒë√£ t·ªìn t·∫°i.', status: false };
        }
        const newArea = new Form({
            name: processedName,
            describe: describe?.toString().trim(),
            createdBy: user.id,
            formInput: formInput,
        });
        await newArea.save();
        reloadForm();
        return { message: `ƒê√£ t·∫°o th√†nh c√¥ng form "${name}".`, status: true };
    } catch (error) {
        console.error("L·ªói t·∫°o form:", error);
        return { message: 'L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ t·∫°o form.', status: false };
    }
}

export async function updateAreaAction(_previousState, formData) {
    const id = formData.get('id');
    const name = formData.get('name');
    const describe = formData.get('describe');
    const formInputValues = formData.getAll('formInput');
    const formInput = formInputValues.map(Number);
    const user = await checkAuthToken();
    if (!user || !user.id) return { message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.', status: false };
    if (!user.role.includes('Admin')) {
        return { message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y', status: false };
    }
    if (!id || !name) {
        return { message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá (thi·∫øu ID ho·∫∑c t√™n).', status: false };
    }
    if (name.length > 50) {
        return { message: 'T√™n form ph·∫£i √≠t h∆°n 50 k√≠ t·ª±', status: false };
    }
    const processedName = name.toString().toLowerCase().trim();
    try {
        await dbConnect();
        const existingArea = await Form.findOne({
            name: processedName,
            _id: { $ne: id }
        });

        if (existingArea) {
            return { message: 'L·ªói: T√™n form n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü m·ªôt khu v·ª±c kh√°c.', status: false };
        }

        const updatedArea = await Form.findByIdAndUpdate(
            id,
            {
                name: processedName,
                describe: describe?.toString().trim(),
                formInput: formInput,
            },
            { new: true }
        );

        if (!updatedArea) {
            return { message: 'Kh√¥ng t√¨m th·∫•y khu v·ª±c ƒë·ªÉ c·∫≠p nh·∫≠t.', status: false };
        }
        reloadForm();
        return { message: `ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng form "${name}".`, status: true };

    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t form:", error);
        return { message: 'L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t form.', status: false };
    }
}

export async function deleteAreaAction(_previousState, formData) {
    const id = formData.get('id');
    const user = await checkAuthToken();
    if (!user || !user.id) return { message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.', status: false };
    if (!user.role.includes('Admin') && !user.role.includes('Sale')) {
        return { message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y', status: false };
    }
    try {
        await dbConnect();
        const areaToDelete = await Form.findById(id);
        if (!areaToDelete) { return { status: false, message: 'Kh√¥ng t√¨m th·∫•y khu v·ª±c ƒë·ªÉ x√≥a.' }; }
        await Form.findByIdAndDelete(id);
        reloadForm();
        return { status: true, message: 'X√≥a khu v·ª±c th√†nh c√¥ng!' };
    } catch (error) {
        console.error('L·ªói khi x√≥a khu v·ª±c:', error);
        return { status: false, message: 'ƒê√£ x·∫£y ra l·ªói. Kh√¥ng th·ªÉ x√≥a khu v·ª±c.' };
    }
}
import { revalidateData } from '@/app/actions/customer.actions';
const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbxvb6bM9l3Yw0n3QJILbNA4BMynBcuGdQYvXKuxNLWU1fhjoFS54OjZ2qbis3vJEm-QYg/exec';


export async function addRegistrationToAction(_previousState, formData) {
    // --- B∆Ø·ªöC 1: L·∫§Y D·ªÆ LI·ªÜU V√Ä SANITIZE ---
    // S·ª≠ d·ª•ng trim() ƒë·ªÉ lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a, tr√°nh injection c∆° b·∫£n
    const rawFormData = {
        name: formData.get('name')?.trim() || '',
        address: formData.get('address')?.trim() || '',
        phone: formData.get('phone')?.trim() || '',
        email: formData.get('email')?.trim() || '',
        bd: formData.get('bd')?.trim() || '',
        service: formData.get('service')?.trim() || '',
        source: formData.get('source')?.trim() || '',
        sourceName: formData.get('sourceName')?.trim() || '',
    };

    // --- B∆Ø·ªöC 2: VALIDATE D·ªÆ LI·ªÜU ---
    // Name: B·∫Øt bu·ªôc theo model
    if (!rawFormData.name) {
        return { message: 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n.', type: 'error' };
    }

    // Phone: B·∫Øt bu·ªôc, normalize, regex strict (Vi·ªát Nam: 10 ch·ªØ s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0)
    if (!rawFormData.phone) {
        return { message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.', type: 'error' };
    }
    rawFormData.phone = normalizePhone(rawFormData.phone);
    const phoneRegex = /^0\d{9}$/;
    if (!phoneRegex.test(rawFormData.phone)) {
        return { message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ph·∫£i l√† 10 ch·ªØ s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0).', type: 'error' };
    }

    // Email: N·∫øu c√≥, check format c∆° b·∫£n
    if (rawFormData.email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(rawFormData.email)) {
            return { message: 'Email kh√¥ng h·ª£p l·ªá.', type: 'error' };
        }
    }

    // Birthdate: N·∫øu c√≥, validate v√† convert sang Date
    let birthDate = null;
    if (rawFormData.bd) {
        birthDate = new Date(rawFormData.bd);
        if (isNaN(birthDate.getTime())) {
            return { message: 'Ng√†y sinh kh√¥ng h·ª£p l·ªá.', type: 'error' };
        }
    }

    // Source: Ph·∫£i l√† ObjectId h·ª£p l·ªá
    if (!rawFormData.source || !mongoose.Types.ObjectId.isValid(rawFormData.source)) {
        return { message: 'Ngu·ªìn d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.', type: 'error' };
    }

    // Check missing info cho tr·∫°ng th√°i
    let initialStatus = 'new_unconfirmed';
    if (!rawFormData.name || !rawFormData.phone || !rawFormData.service) {
        initialStatus = 'missing_info';
    }

    await dbConnect();
    const existingCustomer = await Customer.findOne({ phone: rawFormData.phone });
    if (existingCustomer) {
        // Merge n·∫øu tr√πng (PDF: Data tr√πng ‚Äì G·ªôp h·ªì s∆°)
        existingCustomer.tags = [...new Set([...existingCustomer.tags, rawFormData.service])]; // Merge tags
        existingCustomer.care.push({ content: 'Data tr√πng t·ª´ form m·ªõi, g·ªôp h·ªì s∆°', createBy: '68b0af5cf58b8340827174e0' });
        await existingCustomer.save();
        return { message: 'Data tr√πng, ƒë√£ g·ªôp h·ªì s∆°.', type: 'success' };
    }

    // --- B∆Ø·ªöC 3: T·∫†O CUSTOMER TRONG MONGODB ---
    try {
        const newCustomer = new Customer({
            name: rawFormData.name,
            bd: birthDate,
            email: rawFormData.email,
            phone: rawFormData.phone,
            area: rawFormData.address,
            source: rawFormData.source,
            sourceDetails: rawFormData.sourceName, // Map
            tags: [rawFormData.service], // Push d·ªãch v·ª• v√†o tags
            pipelineStatus: initialStatus,
            care: [{ content: `Ti·∫øp nh·∫≠n t·ª´ ${rawFormData.sourceName || 'form'}, ngu·ªìn: ${rawFormData.source}`, createBy: '68b0af5cf58b8340827174e0' }], // Log t·ª± ƒë·ªông
        });

        await newCustomer.save();
        revalidateData();

        // --- B∆Ø·ªöC 4: CHU·∫®N B·ªä V√Ä G·ª¨I TH√îNG B√ÅO QUA APPS SCRIPT ---
        const createAt = new Date();
        const formattedCreateAt = createAt.toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' });
        const formattedBirthDate = birthDate ? birthDate.toLocaleDateString('vi-VN') : 'Kh√¥ng c√≥';

        const messageForAppScript = `üìÖ ƒêƒÉng k√Ω t·ª´ Form ${rawFormData.sourceName || 'Form tr·ª±c ti·∫øp'}
-----------------------------------
H·ªç v√† t√™n: ${rawFormData.name}
Li√™n h·ªá: ${rawFormData.phone}
ƒê·ªãa ch·ªâ: ${rawFormData.address || 'Kh√¥ng c√≥'}
Ng√†y sinh: ${formattedBirthDate}
D·ªãch v·ª• quan t√¢m: ${rawFormData.service || 'Kh√¥ng c√≥'}
Th·ªùi gian: ${formattedCreateAt}`;

        const encodedMessage = encodeURIComponent(messageForAppScript);
        const url = `${APPS_SCRIPT_URL}?mes=${encodedMessage}`;
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Apps Script request failed with status ${response.status}`);
        }

        return { message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.', type: 'success' };

    } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω ƒëƒÉng k√Ω:", error);
        if (error.code === 11000 && error.keyPattern?.phone) {
            return { message: 'S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥.', type: 'error' };
        }
        return { message: 'L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ g·ª≠i ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.', type: 'error' };
    }
}

function normalizePhone(phone) {
    const t = (phone ?? '').trim().replace(/\D/g, ''); // Ch·ªâ gi·ªØ s·ªë, tr√°nh injection
    if (!t) return '';
    return t.startsWith('0') ? t : '0' + t;
}